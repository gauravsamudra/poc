# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pr:
- none

pool:
  vmImage: windows-latest

steps:

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'knol-subs_vsenterprise-rg_poc-svcconn'
      KeyVaultName: 'gsvault'
      SecretsFilter: 'azure-pipelines-svcprin--secret1'
      RunAsPreJob: false

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'knol-subs_vsenterprise-rg_poc-svcconn'
      ScriptType: 'InlineScript'
      Inline: |
        Write-Host "Starting script with secret $(azure-pipelines-svcprin--secret1)"
        $TenantID = 'b380ac77-d7e0-439e-88d1-6b82f7295bf4'
        $clientId = '0dd2d500-42dc-4dab-9ce8-7a07275da0af' # id of azure-pipelines-svcprin
        $clientSecret = '$(azure-pipelines-svcprin--secret1)'
        $resourceAppIdURI = 'https://database.windows.net/'
        
        $tokenResponse = Invoke-RestMethod -Method Post -UseBasicParsing `
            -Uri "https://login.windows.net/$($TenantID)/oauth2/token" `
            -Body @{
                resource=$resourceAppIdURI
                client_id=$clientId
                grant_type='client_credentials'
                client_secret=$clientSecret
            } -ContentType 'application/x-www-form-urlencoded'
        
        if ($tokenResponse) {
          Write-Host "Access token type is $($tokenResponse.token_type), expires $($tokenResponse.expires_on)"
          $token = $tokenResponse.access_token
          Write-Host("##vso[task.setvariable variable=sqlToken;]$token")
        }
      azurePowerShellVersion: 'LatestVersion'

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: 'knol-subs_vsenterprise-rg_poc-svcconn'
      ScriptType: 'InlineScript'
      Inline: |
        $objId="2dd353f9-850a-4d30-91ef-2a0006e08d71"
        function ConvertTo-Sid {
          param (
            [string]$objectId
          )
          [guid]$guid = [System.Guid]::Parse($objectId)
          foreach ($byte in $guid.ToByteArray()) {
          $byteGuid += [System.String]::Format(“{0:X2}”, $byte)
          }
          return “0x” + $byteGuid
        }
        $SID=ConvertTo-Sid($objId)

        $conn = New-Object System.Data.SqlClient.SQLConnection
        $conn.ConnectionString = “Server=angulartest.database.windows.net;Initial Catalog=angulartestdb;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30”
        $conn.AccessToken = "$(sqlToken)"
        Write-Host “Connect to database and execute SQL script”
        $conn.Open()
        $query = "
        IF NOT EXISTS(SELECT * from sys.database_principals WHERE name = 'awesome-svc-prin')
        BEGIN
          CREATE USER [awesome-svc-prin] WITH DEFAULT_SCHEMA=[dbo] , SID = $SID, TYPE= X;
        END
        ELSE
        BEGIN
            PRINT 'User awesome-svc-prin already exists'
        END
        "
        Write-Host $query
        $command = New-Object -TypeName System.Data.SqlClient.SqlCommand($query, $conn)
        $Result = $command.ExecuteScalar()
        $Result
        $conn.Close()
      azurePowerShellVersion: 'LatestVersion'

  # - task: AzureCLI@2
  #   inputs:
  #     azureSubscription: 'knol-subs_vsenterprise-rg_poc-svcconn'
  #     scriptType: 'ps'
  #     scriptLocation: 'inlineScript'
  #     inlineScript: |
  #       Write-Host "Starting script with secret $(azure-pipelines-svcprin--secret1)"
  #       $TenantID = 'b380ac77-d7e0-439e-88d1-6b82f7295bf4'
  #       $clientId = '0dd2d500-42dc-4dab-9ce8-7a07275da0af' # id of azure-pipelines-svcprin
  #       $clientSecret = '$(azure-pipelines-svcprin--secret1)'
  #       $resourceAppIdURI = 'https://database.windows.net/'
        
  #       $tokenResponse = Invoke-RestMethod -Method Post -UseBasicParsing `
  #           -Uri "https://login.windows.net/$($TenantID)/oauth2/token" `
  #           -Body @{
  #               resource=$resourceAppIdURI
  #               client_id=$clientId
  #               grant_type='client_credentials'
  #               client_secret=$clientSecret
  #           } -ContentType 'application/x-www-form-urlencoded'
        
  #       if ($tokenResponse) {
  #         Write-Host "Access token type is $($tokenResponse.token_type), expires $($tokenResponse.expires_on)"
  #         $token = $tokenResponse.access_token
  #         Write-Host("##vso[task.setvariable variable=sqlToken;]$token")
  #       }
        

  # - task: SqlAzureDacpacDeployment@1
  #   inputs:
  #     azureSubscription: 'knol-subs_vsenterprise-rg_poc-svcconn'
  #     AuthenticationType: 'connectionString'
  #     ConnectionString: 'Server=tcp:angulartest.database.windows.net,1433;Initial Catalog=angulartestdb;Persist Security Info=False;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False'
  #     deployType: 'InlineSqlTask'
  #     SqlInline: 'select getdate()'
  #     InlineAdditionalArguments: '/AccessToken:$(sqlToken)'
  #     IpDetectionMethod: 'AutoDetect'

